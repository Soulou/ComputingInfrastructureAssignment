#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import traceback
import argparse
import getpass
import fileutils
import sessions
import workflow

'''
   SAGA_VERBOSE=# for Debug
'''

def main():
    parser = argparse.ArgumentParser(description='Cat files using saga API')
    parser.add_argument('-i', '--identity', metavar='private_key', type=str, nargs="?",
        help='custom private key for SSH connection')
    parser.add_argument('-c', '--certificate', metavar='certificate', type=str, nargs="?",
        help='enable GSISSH connection, specify certificate to use')
    parser.add_argument('-u', '--user', metavar='user', type=str, nargs=1, default=getpass.getuser(),
        help='user to use for ssh connections')
    parser.add_argument('-w', '--retry-wait', metavar='retry_wait', type=int, nargs=1, default=[3],
        help='Time to wait when a job fails')
    parser.add_argument('-n', '--nb-tries', metavar='nb_tries', type=int, nargs=1, default=[1],
        help="Number of times to retry a task before aborting")
    parser.add_argument('-v', '--verbose', action="store_true",
        help='print additional information')
    parser.add_argument('workflow', metavar='workflow', type=str, nargs=1,
        help='workflow file to run')
    args = parser.parse_args()
    workflow_file = args.workflow[0]
    sessions.Factory.setup(args)

    if args.retry_wait[0] < 0:
        print "Duration to wait befores task failures should be positive"
        return -1
    if args.nb_tries[0] < 0:
        print "Number of tries should be positive"
        return -1

    try:
        workflow_tree = workflow.Tree(workflow_file)
        if args.verbose:
            print "Tree of the workflow:\n%s" % workflow_tree
        workflow_tree.run(retry_wait=args.retry_wait[0], nb_tries=args.nb_tries[0])
        return 0
    except workflow.Exception, e:
        print "Exception occured: %s" % e.message
        return 1
    
if __name__ == "__main__":
    sys.exit(main())


